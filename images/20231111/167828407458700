[ex1] 아래와 같이 출력될 수 있도록 나머지 소스코드를 완성하세요.
red box
green box
blue box
class Main{
	public static void main(String args[]){
		Box[] array={
				//here
		};
		for(Box box : array)
			System.out.println(box);
	}
}

[an1] 
class Box{
	String name;
	Box(String name){
		this.name = name;
	}
	public String toString() {
		return this.name+" box";
	}
}
class Main{
	public static void main(String args[]){
		Box[] array={
				new Box("red"),
				new Box("green"),
				new Box("blue")
		};
		for(Box box : array)
			System.out.println(box);
	}
}

[ex2] 아래와 같이 출력되려면?
red car
green car
blue car
class Main{
	public static void main(String args[]){
		for(Car car : getCarArray())
			System.out.println(car);
	}
}

[an2]
class Car{
	String color;
	Car(String c){
		this.color = c;
	}
	public String toString() {
		return this.color+" car";
	}
}

class Main{
	static Car[] getCarArray() {
		return new Car[] {
			new Car("red"),
			new Car("green"),
			new Car("blue")
		};
	}
	public static void main(String args[]){
		for(Car car : getCarArray())
			System.out.println(car);
	}
}

[ex3] 100 200이 출력될 수 있도록 B생성자를 호출하세요.
class A{
	int n;
	A(int n){ this.n=n; }
	void a(){ //here }
	}
class B{
		B(A obj){ System.out.println(obj.n); }
}
class Main{
	public static void main(String args[]){
			new A(100).a();
			new A(200).a();
	}
}

[an3]
class A{
	int n;
	A(int n){ this.n=n; }
	void a(){ new B(this); }
}
class B{
		B(A obj){ System.out.println(obj.n); }
}
class Main{
	public static void main(String args[]){
			new A(100).a();
			new A(200).a();
	}
}

[ex4] 컴파일에러를 해결하세요.
interface A{
	int abc();
}
class B{
	void def(){
		C.ghi(this); // 이부분은 수정될 수 없습니다.
	}
}
class C{
	static void ghi(A obj){
		System.out.println(obj.abc()); // 100
	}
}

[an4]
interface A{
	int abc();
}
class B implements A{
	public int abc() {
		return 100;
	}
	void def(){
		C.ghi(this); // 이부분은 수정될 수 없습니다.
	}
}
class C{
	static void ghi(A obj){
		System.out.println(obj.abc()); // 100
	}
}
class Main{
	public static void main(String args[]) {
		new B().def();
	}
}

[ex5] A클래스 객체의 주소값 얻어오는 문장을 작성한뒤
객체의 주소값을 출력하세요.
class A{
	private static A obj=new A();
	private A(){}
	static A getA(){ return obj; }
}
class Main{
	public static void main(String args[]){
		//here
	}
}

[an5]
class A{
	private static A obj=new A();
	private A(){}
	static A getA(){ return obj; }
}
class Main{
	public static void main(String args[]){
		A a = A.getA();
		System.out.println(a);
	}
}
[ex5-1]
class MemoryDb{
	private static MemoryDb instance = new MemoryDb();
	private MemoryDb(){};
	public static MemoryDb getInstance(){ return instance };


[ex6] java.lang.Class클래스의 getDeclaredFields,
getDeclaredMethods메서드 호출문장을 작성하세요.
class A{
	int a=100;
	String b=200;
	void c(){ System.out.println(300); }
	void d(){ System.out.println(400); }
}
class Main{
	public static void main(String args[]) throws Exception{
		Class<A> c=A.class;
		//here
	}
}

[an6]
import java.lang.reflect.Field;
import java.lang.reflect.Method;

class A{
	int a=100;
	String b = "200";
	void c(){ System.out.println(300); }
	void d(){ System.out.println(400); }
}
class Main{
	public static void main(String args[]) throws Exception{
		Class<A> c = A.class;
		Field[] f = c.getDeclaredFields();
		Method[] m = c.getDeclaredMethods();
	}
}

[ex7] A클래스를 작성하세요.
class Main{
	public static void main(String args[]){
		A o1=new A(1,50); // 1부터 50까지의 합을 구하는 객체
		A o2=new A(51,100); // 51부터 100까지의 합을 구하는 객체
		o1.add(); o2.add();
		System.out.println(o1.sum+o2.sum); // 두객체가 각각 구한 값을 더한값출력 5050
	}
}

[an7]
class A{
	int a, b, sum = 0;
	
	A(int a, int b){
		this.a=a; this.b=b;
	}
	void add() {
		for (int i=a; i<=b; i++)
			sum += i;
	}
}

class Main{
	public static void main(String args[]){
		A o1=new A(1,50); // 1부터 50까지의 합을 구하는 객체
		A o2=new A(51,100); // 51부터 100까지의 합을 구하는 객체
		o1.add(); o2.add();
		System.out.println(o1.sum+o2.sum); // 두객체가 각각 구한 값을 더한값출력 5050
	}
}

[ex8] Grid클래스를 선언하세요.
paint메서드가 호출되면 각각의 그래프정보가 출력됩니다.

class Main{
	public static void main(String args[]){
		Grid grid1=new Grid("막대그래프");
		grid1.setWidth(100);
		grid1.setHeight(200);
		grid1.setBackground(ColorTable.RED);
		grid1.paint();
		/*
::: 막대그래프정보 :::
가로:100 세로:200
배경색상:빨강
		 */
		Grid grid2=new Grid("원형그래프");
		grid2.setWidth(300);
		grid2.setHeight(400);
		grid2.setBackground(ColorTable.GREEN);
		grid2.paint();
		/*
::: 원형그래프정보 :::
가로:300 세로:400
배경색상:초록
		 */
		Grid grid3=new Grid("꺽은선그래프");
		grid3.setWidth(500);
		grid3.setHeight(600);
		grid3.setBackground(ColorTable.BLUE);
		grid3.paint();
		/*
::: 꺽은선그래프정보 :::
가로:500 세로:600
배경색상:파랑
		 */
	}
}

[an8]
enum ColorTable{ RED,GREEN,BLUE }
@RequiredArgsConstructor
@Setter
@ToString
 = @Data
class Grid{
	final	String name;
	int w, h;
	ColorTable color;
	Grid(String name){ this.name = name; }
	
	void setWidth(int w) { this.w=w; }
	void setHeight(int h) { this.h=h; }
	public void setBackground(ColorTable color) {
		this.color=color;
	}
	void paint() {
		System.out.printf("::: %s정보 :::\n", name);
		System.out.printf("가로 : %d 세로 : %d\n", w, h);
		System.out.print("배경색상 : ");
		switch(color){
			case RED : System.out.println("빨강"); break;
			case GREEN : System.out.println("초록"); break;
			case BLUE : System.out.println("파랑"); break;
		}
	}
}

[ex9] 8번문제에서 main메서드내의 소스코드에 반복되는
부분을 발견하고 소스코드를 줄여보세요.

[an9]
class Main{
	static void createGrid(String name, int w, int h, ColorTable color) {
		Grid grid = new Grid(name);
		grid.setWidth(w);
		grid.setHeight(h);
		grid.setBackground(color);
		grid.paint();
	}
	public static void main(String args[]){
		createGrid("막대그래프", 100, 200, ColorTable.RED);
		createGrid("원형그래프", 300, 400, ColorTable.GREEN);
		createGrid("꺽은선그래프", 500, 600, ColorTable.BLUE);
	}
}

[ex10] 배열의 요소를 출력하는 Array객체를 생성하세요.
class Main{
	public static void main(String args[]){
		int[] a={10,20,30};
		int[] b={40,50};
		System.out.println(new Array(a)); // 10 20 30
		System.out.println(new Array(b)); // 40 50
	}
}



[an10]
class Array{
	int[] list;
	Array(int[] list){ 
		this.list=list;
	}
	public String toString() {
		String str = "";
		for (int i : list)
			str += String.valueOf(i)+" ";
		return str;
	}
}

class Main{
	public static void main(String args[]){
		int[] a={10,20,30};
		int[] b={40,50};
		System.out.println(new Array(a)); // 10 20 30
		System.out.println(new Array(b)); // 40 50
	}
}

[ex11]
class Main{
	public static void main(String args[]){
		int[] a={10,20,30,40,50};
		int[] b=new int[5];
		System.arraycopy(a,1,b,3,2);
		// arraycopy메서드 파라메터5개 설명
		// 원본배열
		// 원본배열복사시작인덱스
		// 목적지배열
		// 목적지배열복사한요소붙여넣기할시작인덱스
		// 복사할요소갯수
		System.out.print("원본배열:");
		for(int n:a) System.out.print(n+" ");
		System.out.println();
		System.out.print("복제배열:");
		for(int n:b) System.out.print(n+" ");
	}
}
위 소스코드를 학습한뒤 아래문장에서
copy메서드를 선언하세요.(arraycopy메서드를 이용합니다.)

class Main{
	public static void main(String args[]){
		int[] a={10,20,30};
		int[] b={40,50};
		int[] a1=copy(a);
		int[] b1=copy(b);
		// 복사한뒤 원본과 복제본의 내용은 같지만
		// 원본과 복제본은 주소값이 다릅니다.
		System.out.println(a==a1); // false
		System.out.println(b==b1); // false
		System.out.println(new Array(a)); // 10 20 30
		System.out.println(new Array(a1)); // 10 20 30
		System.out.println(new Array(b)); // 40 50
		System.out.println(new Array(b1)); // 40 50
	}
}

[an11]
class Array{
	int[] list;
	Array(int[] list){ 
		this.list=list;
	}
	public String toString() {
		String str = "";
		for (int i : list)
			str += String.valueOf(i)+" ";
		return str;
	}
}
class Main{
	static int[] copy(int[] list) {
		int[] l = new int[list.length];
		System.arraycopy(list, 0, l, 0, list.length);
		return l;
	}
	public static void main(String args[]){
		int[] a={10,20,30};
		int[] b={40,50};
		int[] a1=copy(a);
		int[] b1=copy(b);

		System.out.println(a==a1); // false
		System.out.println(b==b1); // false
		System.out.println(new Array(a)); // 10 20 30
		System.out.println(new Array(a1)); // 10 20 30
		System.out.println(new Array(b)); // 40 50
		System.out.println(new Array(b1)); // 40 50
	}
}

[ex12]
interface ICommand{
	void execute();
}
class Command{
	void execute(){
		iCommand.execute();
	}
}
class Main{
	public static void main(String args[]){
		Command command=new Command(new AddCommand());
		command.execute(); // 추가하다
		command=new Command(new RemoveCommand());
		command.execute(); // 삭제하다
	}
}

[an12]
import lombok.*;

interface ICommand{
	void execute();
}
//@RequiredArgsConstructor
class Command implements ICommand{
	final ICommand iCommand;
	
	Command(ICommand i){
		this.iCommand = i;
	}
	public void execute(){
		iCommand.execute();
	}
}
class AddCommand implements ICommand{
	public void execute() {
		System.out.println("추가하다");
	}
}
class RemoveCommand implements ICommand{
	public void execute() {
		System.out.println("삭제하다");
	}
}
class Main{
	public static void main(String args[]){
		Command command=new Command(new AddCommand());
		command.execute(); // 추가하다
		command=new Command(new RemoveCommand());
		command.execute(); // 삭제하다
	}
}
